#ifndef QUIC_DETAIL_SOCKET_EVENT_H
#define QUIC_DETAIL_SOCKET_EVENT_H

#include "openssl.hpp"
#include "asio.hpp"
#include "../alpn.hpp"
#include "../basic_endpoint.hpp"
#include "../proto.hpp"
#include "operation.hpp"

#include <chrono>

namespace quic {
namespace detail {

template <class Protocol, class Executor>
class connection_base {
public:
    template <class Protocol1, class Executor1>
    friend class connect_op;

    


    
    
    


    void start() {
        if (!SSL_handle_events(ssl_)) {
            // TODO
        }
        struct timeval tv;
        int inf;
        if (!SSL_get_event_timeout(ssl_, &tv, &inf)) {
            // TODO
        }
        timer_.expires_after(std::chrono::seconds(tv.tv_sec) + std::chrono::microseconds(tv.tv_usec));
        timer_.async_wait([this] (boost::system::error_code error) {
            if (error) return;
            start();
        });
        // socket_.async_wait(boost::asio::socket_base::wait_read, [this] (boost::system::error_code error) {
        //     if (error) return;
        //     start();
        // });
        // socket_.async_wait(boost::asio::socket_base::wait_write, [this] (boost::system::error_code error) {
        //     if (error) return;
        //     start();
        // });
        // socket_.async_wait(boost::asio::socket_base::wait_error, [this] (boost::system::error_code error) {
        //     if (error) return;
        //     start();
        // });
    }


    void on_readable(operation op) {
        boost::asio::post(strand_, [this, op = std::move(op)] () {
            // readable_.emplace_back(std::move(op));
            if (readable_.size() == 1) {
                socket_.async_wait(boost::asio::socket_base::wait_read, [this] (boost::system::error_code error) {
                    // boost::asio::post(strand_, [this, error] () {
                        for (auto& op: readable_) {
                            op(error);
                        }
                        readable_.clear();
                    // });
                });
            }
        });
    }

    void on_writable(operation op) {
        boost::asio::post(strand_, [this, op = std::move(op)] () {
            // writable_.emplace_back(std::move(op));
            if (writable_.size() == 1) {
                socket_.async_wait(boost::asio::socket_base::wait_write, [this] (boost::system::error_code error) {
                    // boost::asio::post(strand_, [this, error] () {
                        for (auto& op : writable_) {
                            op(error);
                        }
                        writable_.clear();
                    // });
                });
            }
        });
    }

   

    template <class Handler>
    void handle_error(int r, Handler&& h) {
        int err = SSL_get_error(this->ssl_, r);

        switch (err) {
        case SSL_ERROR_WANT_READ:
            on_readable(make_operation(std::move(h)));
            break;
        case SSL_ERROR_WANT_WRITE:
            on_writable(make_operation(std::move(h)));
            break;
        default:
            boost::asio::post(strand_, [err, h = std::move(h)] () mutable {
                std::move(h)(boost::system::error_code{err, boost::asio::error::get_ssl_category()});
            });
        }
    }

public:
    template <class Executor1>
    explicit connection_base(Executor1& ex, boost::asio::ssl::context& ctx, SSL* conn = nullptr)
    : ctx_(ctx)
    , strand_(ex)
    , socket_(strand_)
    , timer_(strand_)
    , ssl_(conn) {

        if (ssl_ != nullptr) {
            int fd = SSL_get_fd(ssl_);
            BIO_sock_info_u info;
            BIO_sock_info(fd, BIO_sock_info_type::BIO_SOCK_INFO_ADDRESS, &info);
            if (BIO_ADDR_family(info.addr) == BOOST_ASIO_OS_DEF(AF_INET6)) {
                socket_ = boost::asio::basic_datagram_socket<proto>{strand_, proto::v6(), fd};
            } else {
                socket_ = boost::asio::basic_datagram_socket<proto>{strand_, proto::v4(), fd};
            }
            
            start();
        }
    }
    ~connection_base() {
        if (ssl_ != nullptr) SSL_free(ssl_);
    }

    boost::asio::strand<Executor>& get_executor() {
        return strand_;
    }


    
};

} // namespace detail
} // namespace quic

#endif // QUIC_DETAIL_SOCKET_EVENT_H
